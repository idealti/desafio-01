{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\src\\\\components\\\\PartyLoot.js\";\nimport React, { useState } from \"react\";\nimport { parseLootYML } from \"../utility/stringParser\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { TextareaAutosize, Stepper, Step, StepLabel, Typography } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nexport default function PartyLoot() {\n  function getStepContent(step, data) {\n    switch (step) {\n      case 0:\n        return React.createElement(TextareaAutosize, {\n          name: \"\",\n          rows: 10,\n          cols: 10,\n          id: \"data\",\n          placeholder: \"Party hunt analyzer data.\",\n          \"aria-label\": \"party hunt analyzer data\",\n          onChange: e => {\n            setstate(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n\n      case 1:\n        return _objectSpread({\n          message: \"Results for all of your hunt.\"\n        }, data);\n\n      default:\n        return \"Unknown step\";\n    }\n  }\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setstate = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Data = _useState4[0],\n        setData = _useState4[1];\n\n  const handleSumbit = e => {\n    if (state) {\n      const rawData = parseLootYML(state);\n\n      if (rawData) {\n        setData(rawData);\n      }\n    }\n  };\n\n  return React.createElement(PartyLootStyled, Object.assign({}, Data, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, steps.map((label, index) => React.createElement(Step, {\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(StepLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, label)))), activeStep === 0 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, getStepContent(1)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"success\",\n    onClick: () => {\n      handleSumbit();\n      handleNext();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Submit\"))) : Data && React.createElement(\"div\", {\n    id: \"results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"resultsHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Each player has a\", Data.profit > 0 ? \" net profit of \" : \" net loss of \", React.createElement(\"span\", {\n    style: {\n      color: Data.profit > 0 ? \"green\" : \"red\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, Math.floor(Data.profit).toLocaleString(), \" GP\")), React.createElement(\"p\", {\n    className: \"resultsLoot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Total Loot: \", Math.floor(Data.loot).toLocaleString(), \" GP\"), React.createElement(\"p\", {\n    className: \"resultsLoot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Total Suplies: \", Math.floor(Data.supplies).toLocaleString(), \" GP\")), React.createElement(\"div\", {\n    className: \"resultsBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, Data.players.map((player, idx) => React.createElement(PlayerElement, Object.assign({\n    key: idx\n  }, player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Card.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, player.name), React.createElement(Card.Body, {\n    className: \"p-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"resultsBalance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Balance:\", \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, Math.floor(player.balance).toLocaleString(), \" GP\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"resultsProfit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Profit:\", \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, Math.floor(Data.profit).toLocaleString(), \" GP\")))), React.createElement(Card.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"resultsPayout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Payment:\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \" \", Math.floor(player.payOut).toLocaleString(), \" GP\"))))))), React.createElement(Button, {\n    disabled: activeStep === 0,\n    variant: \"danger\",\n    onClick: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Reset\")));\n}\nconst PartyLootStyled = styled.div`\n  width: 100%;\n  overflow: none;\n  #data {\n    resize: none;\n    width: 90vw;\n    height: 80vh;\n    max-width: 300px;\n    max-height: 550px;\n  }\n  .resultsHeader {\n    width: 100%;\n  }\n  .resultsBody {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n  }\n  #results {\n    display: flex;\n    flex-direction: column;\n    button {\n      align-self: flex-end;\n    }\n  }\n`;\nconst PlayerElement = styled.div`\n  width: 15rem;\n  margin: 1em 5px;\n  font-size: 1rem;\n  p {\n    margin: 0;\n  }\n  .resultsPayout {\n    span {\n      color: ${({\n  payOut\n}) => payOut > 0 ? \"green\" : \"red\"};\n    }\n  }\n  .resultsProfit {\n    span {\n      color: ${({\n  profit\n}) => profit > 0 ? \"green\" : \"red\"};\n    }\n  }\n  .resultsBalance {\n    span {\n      color: ${({\n  balance\n}) => balance > 0 ? \"green\" : \"red\"};\n    }\n  }\n`;\n\nfunction getSteps() {\n  return [\"Data\", \"Results\"];\n}","map":{"version":3,"sources":["C:/Users/pedro/Desktop/Nova pasta (2)/tibiacalculators/src/components/PartyLoot.js"],"names":["React","useState","parseLootYML","Button","Card","TextareaAutosize","Stepper","Step","StepLabel","Typography","styled","PartyLoot","getStepContent","step","data","e","setstate","target","value","message","activeStep","setActiveStep","steps","getSteps","handleNext","prevActiveStep","handleBack","handleReset","state","Data","setData","handleSumbit","rawData","map","label","index","profit","color","Math","floor","toLocaleString","loot","supplies","players","player","idx","name","balance","payOut","PartyLootStyled","div","PlayerElement"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { parseLootYML } from \"../utility/stringParser\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport {\r\n  TextareaAutosize,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function PartyLoot() {\r\n  function getStepContent(step, data) {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <TextareaAutosize\r\n            name=''\r\n            rows={10}\r\n            cols={10}\r\n            id='data'\r\n            placeholder='Party hunt analyzer data.'\r\n            aria-label='party hunt analyzer data'\r\n            onChange={(e) => {\r\n              setstate(e.target.value);\r\n            }}\r\n          />\r\n        );\r\n      case 1:\r\n        return { message: \"Results for all of your hunt.\", ...data };\r\n      default:\r\n        return \"Unknown step\";\r\n    }\r\n  }\r\n\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const steps = getSteps();\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n  const [state, setstate] = useState(\"\");\r\n  const [Data, setData] = useState(null);\r\n  const handleSumbit = (e) => {\r\n    if (state) {\r\n      const rawData = parseLootYML(state);\r\n      if (rawData) {\r\n        setData(rawData);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PartyLootStyled {...Data}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {activeStep === 0 ? (\r\n        <div>\r\n          <Typography>{getStepContent(1)}</Typography>\r\n          <div>\r\n            <Button\r\n              color='success'\r\n              onClick={() => {\r\n                handleSumbit();\r\n                handleNext();\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        Data && (\r\n          <div id='results'>\r\n            <div className='resultsHeader'>\r\n              <h4>\r\n                Each player has a\r\n                {Data.profit > 0 ? \" net profit of \" : \" net loss of \"}\r\n                <span style={{ color: Data.profit > 0 ? \"green\" : \"red\" }}>\r\n                  {Math.floor(Data.profit).toLocaleString()} GP\r\n                </span>\r\n              </h4>\r\n              <p className='resultsLoot'>\r\n                Total Loot: {Math.floor(Data.loot).toLocaleString()} GP\r\n              </p>\r\n              <p className='resultsLoot'>\r\n                Total Suplies: {Math.floor(Data.supplies).toLocaleString()} GP\r\n              </p>\r\n              {/* <p>Loot type: {Data.lootType}</p> */}\r\n            </div>\r\n            <div className='resultsBody'>\r\n              {Data.players.map((player, idx) => (\r\n                <PlayerElement key={idx} {...player}>\r\n                  <Card>\r\n                    <Card.Header>{player.name}</Card.Header>\r\n                    <Card.Body className='p-1'>\r\n                      <Card.Text>\r\n                        <span className='resultsBalance'>\r\n                          Balance:{\" \"}\r\n                          <span>\r\n                            {Math.floor(player.balance).toLocaleString()} GP\r\n                          </span>\r\n                        </span>\r\n                        <br />\r\n                        <span className='resultsProfit'>\r\n                          Profit:{\" \"}\r\n                          <span>\r\n                            {Math.floor(Data.profit).toLocaleString()} GP\r\n                          </span>\r\n                        </span>\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                      <p className='resultsPayout'>\r\n                        Payment:\r\n                        <span>\r\n                          {\" \"}\r\n                          {Math.floor(player.payOut).toLocaleString()} GP\r\n                        </span>\r\n                      </p>\r\n                    </Card.Footer>\r\n                  </Card>\r\n                </PlayerElement>\r\n              ))}\r\n            </div>\r\n            <Button\r\n              disabled={activeStep === 0}\r\n              variant='danger'\r\n              onClick={handleReset}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        )\r\n      )}\r\n    </PartyLootStyled>\r\n  );\r\n}\r\n\r\nconst PartyLootStyled = styled.div`\r\n  width: 100%;\r\n  overflow: none;\r\n  #data {\r\n    resize: none;\r\n    width: 90vw;\r\n    height: 80vh;\r\n    max-width: 300px;\r\n    max-height: 550px;\r\n  }\r\n  .resultsHeader {\r\n    width: 100%;\r\n  }\r\n  .resultsBody {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n  }\r\n  #results {\r\n    display: flex;\r\n    flex-direction: column;\r\n    button {\r\n      align-self: flex-end;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PlayerElement = styled.div`\r\n  width: 15rem;\r\n  margin: 1em 5px;\r\n  font-size: 1rem;\r\n  p {\r\n    margin: 0;\r\n  }\r\n  .resultsPayout {\r\n    span {\r\n      color: ${({ payOut }) => (payOut > 0 ? \"green\" : \"red\")};\r\n    }\r\n  }\r\n  .resultsProfit {\r\n    span {\r\n      color: ${({ profit }) => (profit > 0 ? \"green\" : \"red\")};\r\n    }\r\n  }\r\n  .resultsBalance {\r\n    span {\r\n      color: ${({ balance }) => (balance > 0 ? \"green\" : \"red\")};\r\n    }\r\n  }\r\n`;\r\n\r\nfunction getSteps() {\r\n  return [\"Data\", \"Results\"];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}