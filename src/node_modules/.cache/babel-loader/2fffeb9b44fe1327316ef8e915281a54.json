{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\pedro\\\\Desktop\\\\Nova pasta (2)\\\\tibiacalculators\\\\src\\\\components\\\\PartyLoot.js\";\nimport React, { useState } from 'react';\nimport { parseLootYML } from '../utility/stringParser';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport { TextareaAutosize, Stepper, Step, StepLabel, Typography } from '@material-ui/core';\nimport styled from 'styled-components';\nexport default function PartyLoot() {\n  function getStepContent(step, data) {\n    switch (step) {\n      case 0:\n        return React.createElement(TextareaAutosize, {\n          name: \"\",\n          rows: 10,\n          cols: 10,\n          id: \"data\",\n          placeholder: \"Party hunt analyzer data.\",\n          \"aria-label\": \"party hunt analyzer data\",\n          onChange: e => {\n            setstate(e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n\n      case 1:\n        return _objectSpread({\n          message: 'Results for all of your hunt.'\n        }, data);\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setstate = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Data = _useState4[0],\n        setData = _useState4[1];\n\n  const handleSumbit = e => {\n    if (state) {\n      const rawData = parseLootYML(state);\n\n      if (rawData) {\n        setData(rawData);\n      }\n    }\n  };\n\n  return React.createElement(PartyLootStyled, Object.assign({}, Data, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, steps.map((label, index) => React.createElement(Step, {\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(StepLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, label)))), activeStep === 0 ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, getStepContent(0)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"success\",\n    onClick: () => {\n      handleSumbit();\n      handleNext();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Submit\"))) : Data && React.createElement(\"div\", {\n    id: \"results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"resultsHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Each player has a\", Data.profit > 0 ? ' net profit of ' : ' net loss of ', React.createElement(\"span\", {\n    style: {\n      color: Data.profit > 0 ? 'green' : 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, Math.floor(Data.profit).toLocaleString(), \" GP\")), React.createElement(\"p\", {\n    className: \"resultsLoot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Total Loot: \", Math.floor(Data.loot).toLocaleString(), \" GP\"), React.createElement(\"p\", {\n    className: \"resultsLoot\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Total Suplies: \", Math.floor(Data.supplies).toLocaleString(), \" GP\")), React.createElement(\"div\", {\n    className: \"resultsBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, Data.players.map((player, idx) => React.createElement(PlayerElement, Object.assign({\n    key: idx\n  }, player, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Card.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, player.name), React.createElement(Card.Body, {\n    className: \"p-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Card.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"resultsBalance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Balance:\", ' ', React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, Math.floor(player.balance).toLocaleString(), \" GP\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"resultsProfit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Profit:\", ' ', React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, Math.floor(Data.profit).toLocaleString(), \" GP\")))), React.createElement(Card.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"resultsPayout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Payment:\", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, ' ', Math.floor(player.payOut).toLocaleString(), \" GP\"))))))), React.createElement(Button, {\n    disabled: activeStep === 0,\n    variant: \"danger\",\n    onClick: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Reset\")));\n}\nconst PartyLootStyled = styled.div`\n\twidth: 100%;\n\toverflow: none;\n\t#data {\n\t\tresize: none;\n\t\twidth: 90vw;\n\t\theight: 80vh;\n\t\tmax-width: 300px;\n\t\tmax-height: 550px;\n\t}\n\t.resultsHeader {\n\t\twidth: 100%;\n\t}\n\t.resultsBody {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tjustify-content: space-evenly;\n\t}\n\t#results {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbutton {\n\t\t\talign-self: flex-end;\n\t\t}\n\t}\n`;\nconst PlayerElement = styled.div`\n\twidth: 15rem;\n\tmargin: 1em 5px;\n\tfont-size: 1rem;\n\tp {\n\t\tmargin: 0;\n\t}\n\t.resultsPayout {\n\t\tspan {\n\t\t\tcolor: ${({\n  payOut\n}) => payOut > 0 ? 'green' : 'red'};\n\t\t}\n\t}\n\t.resultsProfit {\n\t\tspan {\n\t\t\tcolor: ${({\n  profit\n}) => profit > 0 ? 'green' : 'red'};\n\t\t}\n\t}\n\t.resultsBalance {\n\t\tspan {\n\t\t\tcolor: ${({\n  balance\n}) => balance > 0 ? 'green' : 'red'};\n\t\t}\n\t}\n`;\n\nfunction getSteps() {\n  return ['Data', 'Results'];\n}","map":{"version":3,"sources":["C:/Users/pedro/Desktop/Nova pasta (2)/tibiacalculators/src/components/PartyLoot.js"],"names":["React","useState","parseLootYML","Button","Card","TextareaAutosize","Stepper","Step","StepLabel","Typography","styled","PartyLoot","getStepContent","step","data","e","setstate","target","value","message","activeStep","setActiveStep","steps","getSteps","handleNext","prevActiveStep","handleBack","handleReset","state","Data","setData","handleSumbit","rawData","map","label","index","profit","color","Math","floor","toLocaleString","loot","supplies","players","player","idx","name","balance","payOut","PartyLootStyled","div","PlayerElement"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { parseLootYML } from '../utility/stringParser';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {\r\n\tTextareaAutosize,\r\n\tStepper,\r\n\tStep,\r\n\tStepLabel,\r\n\tTypography\r\n} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nexport default function PartyLoot() {\r\n\tfunction getStepContent(step, data) {\r\n\t\tswitch (step) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<TextareaAutosize\r\n\t\t\t\t\t\tname=''\r\n\t\t\t\t\t\trows={10}\r\n\t\t\t\t\t\tcols={10}\r\n\t\t\t\t\t\tid='data'\r\n\t\t\t\t\t\tplaceholder='Party hunt analyzer data.'\r\n\t\t\t\t\t\taria-label='party hunt analyzer data'\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetstate(e.target.value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\tcase 1:\r\n\t\t\t\treturn { message: 'Results for all of your hunt.', ...data };\r\n\t\t\tdefault:\r\n\t\t\t\treturn 'Unknown step';\r\n\t\t}\r\n\t}\r\n\r\n\tconst [activeStep, setActiveStep] = React.useState(0);\r\n\tconst steps = getSteps();\r\n\r\n\tconst handleNext = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep + 1);\r\n\t};\r\n\r\n\tconst handleBack = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep - 1);\r\n\t};\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetActiveStep(0);\r\n\t};\r\n\tconst [state, setstate] = useState('');\r\n\tconst [Data, setData] = useState(null);\r\n\tconst handleSumbit = e => {\r\n\t\tif (state) {\r\n\t\t\tconst rawData = parseLootYML(state);\r\n\t\t\tif (rawData) {\r\n\t\t\t\tsetData(rawData);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<PartyLootStyled {...Data}>\r\n\t\t\t<Stepper activeStep={activeStep}>\r\n\t\t\t\t{steps.map((label, index) => (\r\n\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\r\n\t\t\t\t\t</Step>\r\n\t\t\t\t))}\r\n\t\t\t</Stepper>\r\n\t\t\t{activeStep === 0 ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Typography>{getStepContent(0)}</Typography>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tcolor='success'\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\thandleSumbit();\r\n\t\t\t\t\t\t\t\thandleNext();\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\tData && (\r\n\t\t\t\t\t<div id='results'>\r\n\t\t\t\t\t\t<div className='resultsHeader'>\r\n\t\t\t\t\t\t\t<h4>\r\n\t\t\t\t\t\t\t\tEach player has a\r\n\t\t\t\t\t\t\t\t{Data.profit > 0 ? ' net profit of ' : ' net loss of '}\r\n\t\t\t\t\t\t\t\t<span style={{ color: Data.profit > 0 ? 'green' : 'red' }}>\r\n\t\t\t\t\t\t\t\t\t{Math.floor(Data.profit).toLocaleString()} GP\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t<p className='resultsLoot'>\r\n\t\t\t\t\t\t\t\tTotal Loot: {Math.floor(Data.loot).toLocaleString()} GP\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p className='resultsLoot'>\r\n\t\t\t\t\t\t\t\tTotal Suplies: {Math.floor(Data.supplies).toLocaleString()} GP\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t{/* <p>Loot type: {Data.lootType}</p> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='resultsBody'>\r\n\t\t\t\t\t\t\t{Data.players.map((player, idx) => (\r\n\t\t\t\t\t\t\t\t<PlayerElement key={idx} {...player}>\r\n\t\t\t\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Header>{player.name}</Card.Header>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Body className='p-1'>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span className='resultsBalance'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tBalance:{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(player.balance).toLocaleString()} GP\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span className='resultsProfit'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tProfit:{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(Data.profit).toLocaleString()} GP\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t\t\t\t<Card.Footer>\r\n\t\t\t\t\t\t\t\t\t\t\t<p className='resultsPayout'>\r\n\t\t\t\t\t\t\t\t\t\t\t\tPayment:\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{Math.floor(player.payOut).toLocaleString()} GP\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t\t</Card.Footer>\r\n\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t</PlayerElement>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tdisabled={activeStep === 0}\r\n\t\t\t\t\t\t\tvariant='danger'\r\n\t\t\t\t\t\t\tonClick={handleReset}>\r\n\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t)}\r\n\t\t</PartyLootStyled>\r\n\t);\r\n}\r\n\r\nconst PartyLootStyled = styled.div`\r\n\twidth: 100%;\r\n\toverflow: none;\r\n\t#data {\r\n\t\tresize: none;\r\n\t\twidth: 90vw;\r\n\t\theight: 80vh;\r\n\t\tmax-width: 300px;\r\n\t\tmax-height: 550px;\r\n\t}\r\n\t.resultsHeader {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.resultsBody {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: space-evenly;\r\n\t}\r\n\t#results {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbutton {\r\n\t\t\talign-self: flex-end;\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst PlayerElement = styled.div`\r\n\twidth: 15rem;\r\n\tmargin: 1em 5px;\r\n\tfont-size: 1rem;\r\n\tp {\r\n\t\tmargin: 0;\r\n\t}\r\n\t.resultsPayout {\r\n\t\tspan {\r\n\t\t\tcolor: ${({ payOut }) => (payOut > 0 ? 'green' : 'red')};\r\n\t\t}\r\n\t}\r\n\t.resultsProfit {\r\n\t\tspan {\r\n\t\t\tcolor: ${({ profit }) => (profit > 0 ? 'green' : 'red')};\r\n\t\t}\r\n\t}\r\n\t.resultsBalance {\r\n\t\tspan {\r\n\t\t\tcolor: ${({ balance }) => (balance > 0 ? 'green' : 'red')};\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nfunction getSteps() {\r\n\treturn ['Data', 'Results'];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}