{"ast":null,"code":"export function parseLootYML(string) {\n  const stringifyPaste = string.split(`\\n`);\n  const partySize = Math.floor((stringifyPaste.length - 1) / 6);\n  let partyHuntObjects = [];\n  let playerIdx = 6;\n\n  for (let i = 0; i < partySize; i++) {\n    const playerObject = {\n      name: stringifyPaste[playerIdx],\n      loot: trimSpaces(stringifyPaste[playerIdx + 1]),\n      supplies: trimSpaces(stringifyPaste[playerIdx + 2]),\n      balance: trimSpaces(stringifyPaste[playerIdx + 3]),\n      damage: trimSpaces(stringifyPaste[playerIdx + 4]),\n      healing: trimSpaces(stringifyPaste[playerIdx + 5])\n    };\n    playerIdx = playerIdx + 6;\n    partyHuntObjects.push(playerObject);\n  }\n\n  partyHuntObjects = partyHuntObjects.sort((a, b) => {\n    return a['loot'] > b['loot'] ? -1 : 1;\n  });\n  const payoutObject = {};\n  let totalLoot = trimSpaces(stringifyPaste[3]);\n  let totalSupplies = trimSpaces(stringifyPaste[4]);\n  const profit = (totalLoot - totalSupplies) / 4;\n  partyHuntObjects.forEach(el => {\n    el['profit'] = profit;\n    el['payOut'] = el.supplies + profit;\n  });\n  const rawData = {\n    lootType: stringifyPaste[playerIdx - 5],\n    loot: totalLoot,\n    profit,\n    players: partyHuntObjects,\n    supplies: totalSupplies\n  };\n  return rawData;\n}\n\nfunction trimSpaces(string) {\n  string = string.split(':');\n  let newString = [];\n\n  for (let i = 0; i < string[1].length; i++) {\n    if (string[1].charCodeAt(i) < 58 && string[1].charCodeAt(i) > 47 || string[1].charCodeAt(i) === 45) {\n      newString.push(string[1][i]);\n    }\n  }\n\n  return Number.parseFloat(newString.join(''));\n}","map":{"version":3,"sources":["C:/Users/pedro/Desktop/Nova pasta (2)/tibiacalculators/src/utility/stringParser.js"],"names":["parseLootYML","string","stringifyPaste","split","partySize","Math","floor","length","partyHuntObjects","playerIdx","i","playerObject","name","loot","trimSpaces","supplies","balance","damage","healing","push","sort","a","b","payoutObject","totalLoot","totalSupplies","profit","forEach","el","rawData","lootType","players","newString","charCodeAt","Number","parseFloat","join"],"mappings":"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","sourcesContent":["export function parseLootYML(string) {\r\n\tconst stringifyPaste = string.split(`\\n`);\r\n\tconst partySize = Math.floor((stringifyPaste.length - 1) / 6);\r\n\tlet partyHuntObjects = [];\r\n\tlet playerIdx = 6;\r\n\tfor (let i = 0; i < partySize; i++) {\r\n\t\tconst playerObject = {\r\n\t\t\tname: stringifyPaste[playerIdx],\r\n\t\t\tloot: trimSpaces(stringifyPaste[playerIdx + 1]),\r\n\t\t\tsupplies: trimSpaces(stringifyPaste[playerIdx + 2]),\r\n\t\t\tbalance: trimSpaces(stringifyPaste[playerIdx + 3]),\r\n\t\t\tdamage: trimSpaces(stringifyPaste[playerIdx + 4]),\r\n\t\t\thealing: trimSpaces(stringifyPaste[playerIdx + 5])\r\n\t\t};\r\n\t\tplayerIdx = playerIdx + 6;\r\n\t\tpartyHuntObjects.push(playerObject);\r\n\t}\r\n\tpartyHuntObjects = partyHuntObjects.sort((a, b) => {\r\n\t\treturn a['loot'] > b['loot'] ? -1 : 1;\r\n\t});\r\n\tconst payoutObject = {};\r\n\r\n\tlet totalLoot = trimSpaces(stringifyPaste[3]);\r\n\tlet totalSupplies = trimSpaces(stringifyPaste[4]);\r\n\r\n\tconst profit = (totalLoot - totalSupplies) / 4;\r\n\tpartyHuntObjects.forEach(el => {\r\n\t\tel['profit'] = profit;\r\n\t\tel['payOut'] = el.supplies + profit;\r\n\t});\r\n\tconst rawData = {\r\n\t\tlootType: stringifyPaste[playerIdx - 5],\r\n\t\tloot: totalLoot,\r\n\t\tprofit,\r\n\t\tplayers: partyHuntObjects,\r\n\t\tsupplies: totalSupplies\r\n\t};\r\n\treturn rawData;\r\n}\r\n\r\nfunction trimSpaces(string) {\r\n\tstring = string.split(':');\r\n\tlet newString = [];\r\n\tfor (let i = 0; i < string[1].length; i++) {\r\n\t\tif (\r\n\t\t\t(string[1].charCodeAt(i) < 58 && string[1].charCodeAt(i) > 47) ||\r\n\t\t\tstring[1].charCodeAt(i) === 45\r\n\t\t) {\r\n\t\t\tnewString.push(string[1][i]);\r\n\t\t}\r\n\t}\r\n\treturn Number.parseFloat(newString.join(''));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}