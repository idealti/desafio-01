{"ast":null,"code":"export function parseLootYML(string) {\n  const stringifyPaste = string.split(`\\n`);\n  const partySize = Math.floor((stringifyPaste.length - 1) / 6);\n  let partyHuntObjects = [];\n  let playerIdx = 6;\n\n  for (let i = 0; i < partySize; i++) {\n    const playerObject = {\n      name: stringifyPaste[playerIdx],\n      loot: trimSpaces(stringifyPaste[playerIdx + 1]),\n      supplies: trimSpaces(stringifyPaste[playerIdx + 2]),\n      balance: trimSpaces(stringifyPaste[playerIdx + 3]),\n      damage: trimSpaces(stringifyPaste[playerIdx + 4]),\n      healing: trimSpaces(stringifyPaste[playerIdx + 5])\n    };\n    playerIdx = playerIdx + 6;\n    partyHuntObjects.push(playerObject);\n  }\n\n  partyHuntObjects = partyHuntObjects.sort((a, b) => {\n    return a[\"loot\"] > b[\"loot\"] ? -1 : 1;\n  });\n  const payoutObject = {};\n  let totalLoot = trimSpaces(stringifyPaste[3]);\n  let totalSupplies = trimSpaces(stringifyPaste[4]);\n  const profit = (totalLoot - totalSupplies) / 4;\n  partyHuntObjects.forEach(el => {\n    el[\"profit\"] = profit;\n    el[\"payOut\"] = el.supplies + profit;\n  });\n  const rawData = {\n    lootType: stringifyPaste[playerIdx - 5],\n    loot: totalLoot,\n    profit,\n    players: partyHuntObjects,\n    supplies: totalSupplies\n  };\n  return rawData;\n}\n\nfunction trimSpaces(string) {\n  string = string.split(\":\");\n  let newString = [];\n\n  for (let i = 0; i < string[1].length; i++) {\n    if (string[1].charCodeAt(i) < 58 && string[1].charCodeAt(i) > 47 || string[1].charCodeAt(i) === 45) {\n      newString.push(string[1][i]);\n    }\n  }\n\n  return Number.parseFloat(newString.join(\"\"));\n}","map":{"version":3,"sources":["C:/Users/pedro/Desktop/Nova pasta (2)/tibiacalculators/src/utility/stringParser.js"],"names":["parseLootYML","string","stringifyPaste","split","partySize","Math","floor","length","partyHuntObjects","playerIdx","i","playerObject","name","loot","trimSpaces","supplies","balance","damage","healing","push","sort","a","b","payoutObject","totalLoot","totalSupplies","profit","forEach","el","rawData","lootType","players","newString","charCodeAt","Number","parseFloat","join"],"mappings":"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","sourcesContent":["export function parseLootYML(string) {\r\n  const stringifyPaste = string.split(`\\n`);\r\n  const partySize = Math.floor((stringifyPaste.length - 1) / 6);\r\n  let partyHuntObjects = [];\r\n  let playerIdx = 6;\r\n  for (let i = 0; i < partySize; i++) {\r\n    const playerObject = {\r\n      name: stringifyPaste[playerIdx],\r\n      loot: trimSpaces(stringifyPaste[playerIdx + 1]),\r\n      supplies: trimSpaces(stringifyPaste[playerIdx + 2]),\r\n      balance: trimSpaces(stringifyPaste[playerIdx + 3]),\r\n      damage: trimSpaces(stringifyPaste[playerIdx + 4]),\r\n      healing: trimSpaces(stringifyPaste[playerIdx + 5]),\r\n    };\r\n    playerIdx = playerIdx + 6;\r\n    partyHuntObjects.push(playerObject);\r\n  }\r\n  partyHuntObjects = partyHuntObjects.sort((a, b) => {\r\n    return a[\"loot\"] > b[\"loot\"] ? -1 : 1;\r\n  });\r\n  const payoutObject = {};\r\n\r\n  let totalLoot = trimSpaces(stringifyPaste[3]);\r\n  let totalSupplies = trimSpaces(stringifyPaste[4]);\r\n\r\n  const profit = (totalLoot - totalSupplies) / 4;\r\n  partyHuntObjects.forEach((el) => {\r\n    el[\"profit\"] = profit;\r\n    el[\"payOut\"] = el.supplies + profit;\r\n  });\r\n  const rawData = {\r\n    lootType: stringifyPaste[playerIdx - 5],\r\n    loot: totalLoot,\r\n    profit,\r\n    players: partyHuntObjects,\r\n    supplies: totalSupplies,\r\n  };\r\n  return rawData;\r\n}\r\n\r\nfunction trimSpaces(string) {\r\n  string = string.split(\":\");\r\n  let newString = [];\r\n  for (let i = 0; i < string[1].length; i++) {\r\n    if (\r\n      (string[1].charCodeAt(i) < 58 && string[1].charCodeAt(i) > 47) ||\r\n      string[1].charCodeAt(i) === 45\r\n    ) {\r\n      newString.push(string[1][i]);\r\n    }\r\n  }\r\n  return Number.parseFloat(newString.join(\"\"));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}